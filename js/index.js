const debug = false

// Create some randomized data.
var data = []
var simplex = new SimplexNoise();

var dims = { x: 35, y: 25, z: 40 };

for(var x = 0; x < dims.x; x++) {
    for(var y = 0; y < dims.y; y++) {
        for(var z = 0; z < dims.z; z++) {
          data.push({'x': x, 'y': y, 'z': z, 'v': simplex.noise3D(x/dims.x, y/dims.y, z/dims.z) + 2})
        }
    }
}

var minVal = _.minBy(data, 'v').v
var maxVal = _.maxBy(data, 'v').v

var minFilter = 0
var maxFilter = 1

var dps = data.slice(0)

var svg = d3.select("svg"),
    control_panel_width = d3.select("#control-panel").node().getBoundingClientRect().width,
    control_panel_height = d3.select("#control-panel").node().getBoundingClientRect().height

var svg_width = 0.5*control_panel_width,
    svg_height = control_panel_height

svg.attr('width', svg_width)
svg.attr('height', svg_height)

var scale_margin = {
        top: svg_height*0.1,
        right: svg_width*0.3,
        bottom: svg_height*0.2,
        left: 5
    },
scale_width = +svg_width - scale_margin.left - scale_margin.right,
scale_height = +svg_height - scale_margin.top - scale_margin.bottom,
g = svg.append("g").attr("transform", "translate(" + scale_margin.left + "," + scale_margin.top + ")");

var xScale = d3.randomNormal(scale_height / 2, scale_height / 8),
    yScale = d3.scaleLinear().range([scale_height, 0]).domain([minVal, maxVal])

var brush = d3.brushY()
    .extent([[0, 0], [scale_width, scale_height]])
    .on("start", brushstart)
    .on("brush end", brushmoved)

// Virids R,G,B,A
const viridis = [
    [0.26700401,0.00487433,0.32941519],[0.26851048,0.00960483,0.33542652],[0.26994384,0.01462494,0.34137895],[0.27130489,0.01994186,0.34726862],[0.27259384,0.02556309,0.35309303],[0.27380934,0.03149748,0.35885256],[0.27495242,0.03775181,0.36454323],[0.27602238,0.04416723,0.37016418],[0.2770184,0.05034437,0.37571452],[0.27794143,0.05632444,0.38119074],[0.27879067,0.06214536,0.38659204],[0.2795655,0.06783587,0.39191723],[0.28026658,0.07341724,0.39716349],[0.28089358,0.07890703,0.40232944],[0.28144581,0.0843197,0.40741404],[0.28192358,0.08966622,0.41241521],[0.28232739,0.09495545,0.41733086],[0.28265633,0.10019576,0.42216032],[0.28291049,0.10539345,0.42690202],[0.28309095,0.11055307,0.43155375],[0.28319704,0.11567966,0.43611482],[0.28322882,0.12077701,0.44058404],[0.28318684,0.12584799,0.44496],[0.283072,0.13089477,0.44924127],[0.28288389,0.13592005,0.45342734],[0.28262297,0.14092556,0.45751726],[0.28229037,0.14591233,0.46150995],[0.28188676,0.15088147,0.46540474],[0.28141228,0.15583425,0.46920128],[0.28086773,0.16077132,0.47289909],[0.28025468,0.16569272,0.47649762],[0.27957399,0.17059884,0.47999675],[0.27882618,0.1754902,0.48339654],[0.27801236,0.18036684,0.48669702],[0.27713437,0.18522836,0.48989831],[0.27619376,0.19007447,0.49300074],[0.27519116,0.1949054,0.49600488],[0.27412802,0.19972086,0.49891131],[0.27300596,0.20452049,0.50172076],[0.27182812,0.20930306,0.50443413],[0.27059473,0.21406899,0.50705243],[0.26930756,0.21881782,0.50957678],[0.26796846,0.22354911,0.5120084],[0.26657984,0.2282621,0.5143487],[0.2651445,0.23295593,0.5165993],[0.2636632,0.23763078,0.51876163],[0.26213801,0.24228619,0.52083736],[0.26057103,0.2469217,0.52282822],[0.25896451,0.25153685,0.52473609],[0.25732244,0.2561304,0.52656332],[0.25564519,0.26070284,0.52831152],[0.25393498,0.26525384,0.52998273],[0.25219404,0.26978306,0.53157905],[0.25042462,0.27429024,0.53310261],[0.24862899,0.27877509,0.53455561],[0.2468114,0.28323662,0.53594093],[0.24497208,0.28767547,0.53726018],[0.24311324,0.29209154,0.53851561],[0.24123708,0.29648471,0.53970946],[0.23934575,0.30085494,0.54084398],[0.23744138,0.30520222,0.5419214],[0.23552606,0.30952657,0.54294396],[0.23360277,0.31382773,0.54391424],[0.2316735,0.3181058,0.54483444],[0.22973926,0.32236127,0.54570633],[0.22780192,0.32659432,0.546532],[0.2258633,0.33080515,0.54731353],[0.22392515,0.334994,0.54805291],[0.22198915,0.33916114,0.54875211],[0.22005691,0.34330688,0.54941304],[0.21812995,0.34743154,0.55003755],[0.21620971,0.35153548,0.55062743],[0.21429757,0.35561907,0.5511844],[0.21239477,0.35968273,0.55171011],[0.2105031,0.36372671,0.55220646],[0.20862342,0.36775151,0.55267486],[0.20675628,0.37175775,0.55311653],[0.20490257,0.37574589,0.55353282],[0.20306309,0.37971644,0.55392505],[0.20123854,0.38366989,0.55429441],[0.1994295,0.38760678,0.55464205],[0.1976365,0.39152762,0.55496905],[0.19585993,0.39543297,0.55527637],[0.19410009,0.39932336,0.55556494],[0.19235719,0.40319934,0.55583559],[0.19063135,0.40706148,0.55608907],[0.18892259,0.41091033,0.55632606],[0.18723083,0.41474645,0.55654717],[0.18555593,0.4185704,0.55675292],[0.18389763,0.42238275,0.55694377],[0.18225561,0.42618405,0.5571201],[0.18062949,0.42997486,0.55728221],[0.17901879,0.43375572,0.55743035],[0.17742298,0.4375272,0.55756466],[0.17584148,0.44128981,0.55768526],[0.17427363,0.4450441,0.55779216],[0.17271876,0.4487906,0.55788532],[0.17117615,0.4525298,0.55796464],[0.16964573,0.45626209,0.55803034],[0.16812641,0.45998802,0.55808199],[0.1666171,0.46370813,0.55811913],[0.16511703,0.4674229,0.55814141],[0.16362543,0.47113278,0.55814842],[0.16214155,0.47483821,0.55813967],[0.16066467,0.47853961,0.55811466],[0.15919413,0.4822374,0.5580728],[0.15772933,0.48593197,0.55801347],[0.15626973,0.4896237,0.557936],[0.15481488,0.49331293,0.55783967],[0.15336445,0.49700003,0.55772371],[0.1519182,0.50068529,0.55758733],[0.15047605,0.50436904,0.55742968],[0.14903918,0.50805136,0.5572505],[0.14760731,0.51173263,0.55704861],[0.14618026,0.51541316,0.55682271],[0.14475863,0.51909319,0.55657181],[0.14334327,0.52277292,0.55629491],[0.14193527,0.52645254,0.55599097],[0.14053599,0.53013219,0.55565893],[0.13914708,0.53381201,0.55529773],[0.13777048,0.53749213,0.55490625],[0.1364085,0.54117264,0.55448339],[0.13506561,0.54485335,0.55402906],[0.13374299,0.54853458,0.55354108],[0.13244401,0.55221637,0.55301828],[0.13117249,0.55589872,0.55245948],[0.1299327,0.55958162,0.55186354],[0.12872938,0.56326503,0.55122927],[0.12756771,0.56694891,0.55055551],[0.12645338,0.57063316,0.5498411],[0.12539383,0.57431754,0.54908564],[0.12439474,0.57800205,0.5482874],[0.12346281,0.58168661,0.54744498],[0.12260562,0.58537105,0.54655722],[0.12183122,0.58905521,0.54562298],[0.12114807,0.59273889,0.54464114],[0.12056501,0.59642187,0.54361058],[0.12009154,0.60010387,0.54253043],[0.11973756,0.60378459,0.54139999],[0.11951163,0.60746388,0.54021751],[0.11942341,0.61114146,0.53898192],[0.11948255,0.61481702,0.53769219],[0.11969858,0.61849025,0.53634733],[0.12008079,0.62216081,0.53494633],[0.12063824,0.62582833,0.53348834],[0.12137972,0.62949242,0.53197275],[0.12231244,0.63315277,0.53039808],[0.12344358,0.63680899,0.52876343],[0.12477953,0.64046069,0.52706792],[0.12632581,0.64410744,0.52531069],[0.12808703,0.64774881,0.52349092],[0.13006688,0.65138436,0.52160791],[0.13226797,0.65501363,0.51966086],[0.13469183,0.65863619,0.5176488],[0.13733921,0.66225157,0.51557101],[0.14020991,0.66585927,0.5134268],[0.14330291,0.66945881,0.51121549],[0.1466164,0.67304968,0.50893644],[0.15014782,0.67663139,0.5065889],[0.15389405,0.68020343,0.50417217],[0.15785146,0.68376525,0.50168574],[0.16201598,0.68731632,0.49912906],[0.1663832,0.69085611,0.49650163],[0.1709484,0.69438405,0.49380294],[0.17570671,0.6978996,0.49103252],[0.18065314,0.70140222,0.48818938],[0.18578266,0.70489133,0.48527326],[0.19109018,0.70836635,0.48228395],[0.19657063,0.71182668,0.47922108],[0.20221902,0.71527175,0.47608431],[0.20803045,0.71870095,0.4728733],[0.21400015,0.72211371,0.46958774],[0.22012381,0.72550945,0.46622638],[0.2263969,0.72888753,0.46278934],[0.23281498,0.73224735,0.45927675],[0.2393739,0.73558828,0.45568838],[0.24606968,0.73890972,0.45202405],[0.25289851,0.74221104,0.44828355],[0.25985676,0.74549162,0.44446673],[0.26694127,0.74875084,0.44057284],[0.27414922,0.75198807,0.4366009],[0.28147681,0.75520266,0.43255207],[0.28892102,0.75839399,0.42842626],[0.29647899,0.76156142,0.42422341],[0.30414796,0.76470433,0.41994346],[0.31192534,0.76782207,0.41558638],[0.3198086,0.77091403,0.41115215],[0.3277958,0.77397953,0.40664011],[0.33588539,0.7770179,0.40204917],[0.34407411,0.78002855,0.39738103],[0.35235985,0.78301086,0.39263579],[0.36074053,0.78596419,0.38781353],[0.3692142,0.78888793,0.38291438],[0.37777892,0.79178146,0.3779385],[0.38643282,0.79464415,0.37288606],[0.39517408,0.79747541,0.36775726],[0.40400101,0.80027461,0.36255223],[0.4129135,0.80304099,0.35726893],[0.42190813,0.80577412,0.35191009],[0.43098317,0.80847343,0.34647607],[0.44013691,0.81113836,0.3409673],[0.44936763,0.81376835,0.33538426],[0.45867362,0.81636288,0.32972749],[0.46805314,0.81892143,0.32399761],[0.47750446,0.82144351,0.31819529],[0.4870258,0.82392862,0.31232133],[0.49661536,0.82637633,0.30637661],[0.5062713,0.82878621,0.30036211],[0.51599182,0.83115784,0.29427888],[0.52577622,0.83349064,0.2881265],[0.5356211,0.83578452,0.28190832],[0.5455244,0.83803918,0.27562602],[0.55548397,0.84025437,0.26928147],[0.5654976,0.8424299,0.26287683],[0.57556297,0.84456561,0.25641457],[0.58567772,0.84666139,0.24989748],[0.59583934,0.84871722,0.24332878],[0.60604528,0.8507331,0.23671214],[0.61629283,0.85270912,0.23005179],[0.62657923,0.85464543,0.22335258],[0.63690157,0.85654226,0.21662012],[0.64725685,0.85839991,0.20986086],[0.65764197,0.86021878,0.20308229],[0.66805369,0.86199932,0.19629307],[0.67848868,0.86374211,0.18950326],[0.68894351,0.86544779,0.18272455],[0.69941463,0.86711711,0.17597055],[0.70989842,0.86875092,0.16925712],[0.72039115,0.87035015,0.16260273],[0.73088902,0.87191584,0.15602894],[0.74138803,0.87344918,0.14956101],[0.75188414,0.87495143,0.14322828],[0.76237342,0.87642392,0.13706449],[0.77285183,0.87786808,0.13110864],[0.78331535,0.87928545,0.12540538],[0.79375994,0.88067763,0.12000532],[0.80418159,0.88204632,0.11496505],[0.81457634,0.88339329,0.11034678],[0.82494028,0.88472036,0.10621724],[0.83526959,0.88602943,0.1026459],[0.84556056,0.88732243,0.09970219],[0.8558096,0.88860134,0.09745186],[0.86601325,0.88986815,0.09595277],[0.87616824,0.89112487,0.09525046],[0.88627146,0.89237353,0.09537439],[0.89632002,0.89361614,0.09633538],[0.90631121,0.89485467,0.09812496],[0.91624212,0.89609127,0.1007168],[0.92610579,0.89732977,0.10407067],[0.93590444,0.8985704,0.10813094],[0.94563626,0.899815,0.11283773],[0.95529972,0.90106534,0.11812832],[0.96489353,0.90232311,0.12394051],[0.97441665,0.90358991,0.13021494],[0.98386829,0.90486726,0.13689671],[0.99324789,0.90615657,0.1439362]
]

const magma = [
    [0.00146159096,0.000466127766,0.01386552,1],[0.00225764007,0.00129495431,0.0183311461,1],[0.00327943222,0.00230452991,0.0237083291,1],[0.00451230222,0.00349037666,0.0299647059,1],[0.00594976987,0.00484285,0.0371296695,1],[0.0075879855,0.00635613622,0.0449730774,1],[0.0094260439,0.00802185006,0.0528443561,1],[0.0114654337,0.00982831486,0.060749638,1],[0.0137075706,0.0117705913,0.0686665843,1],[0.0161557566,0.0138404966,0.076602666,1],[0.018815367,0.0160262753,0.0845844897,1],[0.021691934,0.0183201254,0.092610105,1],[0.0247917814,0.0207147875,0.100675555,1],[0.0281228154,0.0232009284,0.108786954,1],[0.0316955304,0.0257651161,0.116964722,1],[0.0355204468,0.028397457,0.125209396,1],[0.0396084872,0.0310895652,0.133515085,1],[0.043829535,0.0338299885,0.141886249,1],[0.0480616391,0.0366066101,0.150326989,1],[0.0523204388,0.039406602,0.158841025,1],[0.0566148978,0.0421598925,0.167445592,1],[0.060949393,0.0447944924,0.176128834,1],[0.0653301801,0.0473177796,0.184891506,1],[0.0697637296,0.0497264666,0.193735088,1],[0.0742565152,0.0520167766,0.202660374,1],[0.0788150034,0.0541844801,0.211667355,1],[0.0834456313,0.0562249365,0.220755099,1],[0.088154773,0.0581331465,0.229921611,1],[0.0929486914,0.0599038167,0.239163669,1],[0.097833477,0.0615314414,0.248476662,1],[0.102814972,0.0630104053,0.2578544,1],[0.107898679,0.0643351102,0.267288933,1],[0.113094451,0.0654920358,0.276783978,1],[0.118405035,0.0664791593,0.286320656,1],[0.123832651,0.0672946449,0.295879431,1],[0.129380192,0.0679349264,0.305442931,1],[0.135053322,0.0683912798,0.31499989,1],[0.140857952,0.068654071,0.32453764,1],[0.146785234,0.0687382323,0.334011109,1],[0.152839217,0.0686368599,0.34340445,1],[0.159017511,0.0683540225,0.352688028,1],[0.165308131,0.0679108689,0.361816426,1],[0.171713033,0.067305326,0.370770827,1],[0.17821173,0.0665758073,0.379497161,1],[0.184800877,0.0657324381,0.387972507,1],[0.191459745,0.0648183312,0.396151969,1],[0.198176877,0.0638624166,0.404008953,1],[0.204934882,0.0629066192,0.411514273,1],[0.211718061,0.0619917876,0.418646741,1],[0.21851159,0.0611584918,0.425391816,1],[0.225302032,0.0604451843,0.431741767,1],[0.232076515,0.0598886855,0.437694665,1],[0.238825991,0.0595170384,0.443255999,1],[0.245543175,0.0593524384,0.448435938,1],[0.252220252,0.0594147119,0.453247729,1],[0.258857304,0.0597055998,0.457709924,1],[0.265446744,0.0602368754,0.461840297,1],[0.271994089,0.0609935552,0.465660375,1],[0.2784933,0.0619778136,0.469190328,1],[0.284951097,0.0631676261,0.472450879,1],[0.291365817,0.0645534486,0.475462193,1],[0.297740413,0.0661170432,0.478243482,1],[0.304080941,0.0678353452,0.480811572,1],[0.310382027,0.0697024767,0.48318634,1],[0.316654235,0.0716895272,0.485380429,1],[0.322899126,0.0737819504,0.487408399,1],[0.329114038,0.0759715081,0.489286796,1],[0.335307503,0.0782361045,0.491024144,1],[0.341481725,0.0805635079,0.492631321,1],[0.347635742,0.0829463512,0.494120923,1],[0.353773161,0.0853726329,0.495501096,1],[0.359897941,0.0878311772,0.496778331,1],[0.366011928,0.0903143031,0.497959963,1],[0.372116205,0.0928159917,0.499053326,1],[0.378210547,0.0953322947,0.500066568,1],[0.384299445,0.0978549106,0.501001964,1],[0.390384361,0.100379466,0.501864236,1],[0.39646667,0.102902194,0.50265759,1],[0.402547663,0.105419865,0.503385761,1],[0.408628505,0.107929771,0.504052118,1],[0.414708664,0.110431177,0.504661843,1],[0.420791157,0.11292021,0.505214935,1],[0.426876965,0.115395258,0.505713602,1],[0.432967001,0.117854987,0.506159754,1],[0.439062114,0.120298314,0.506555026,1],[0.445163096,0.122724371,0.506900806,1],[0.451270678,0.125132484,0.507198258,1],[0.457385535,0.127522145,0.507448336,1],[0.463508291,0.129892998,0.507651812,1],[0.469639514,0.132244819,0.507809282,1],[0.475779723,0.1345775,0.507921193,1],[0.481928997,0.13689139,0.507988509,1],[0.488088169,0.139186217,0.508010737,1],[0.494257673,0.141462106,0.507987836,1],[0.500437834,0.143719323,0.507919772,1],[0.506628929,0.145958202,0.50780642,1],[0.512831195,0.148179144,0.50764757,1],[0.519044825,0.150382611,0.507442938,1],[0.525269968,0.152569121,0.507192172,1],[0.531506735,0.154739247,0.50689486,1],[0.537755194,0.156893613,0.506550538,1],[0.544015371,0.159032895,0.506158696,1],[0.550287252,0.161157816,0.505718782,1],[0.556570783,0.163269149,0.50523021,1],[0.562865867,0.165367714,0.504692365,1],[0.569172368,0.167454379,0.504104606,1],[0.575490107,0.169530062,0.503466273,1],[0.581818864,0.171595728,0.50277669,1],[0.588158375,0.173652392,0.502035167,1],[0.594508337,0.175701122,0.501241011,1],[0.600868399,0.177743036,0.500393522,1],[0.607238169,0.179779309,0.499491999,1],[0.613617209,0.18181117,0.498535746,1],[0.620005032,0.183839907,0.497524075,1],[0.626401108,0.185866869,0.496456304,1],[0.632804854,0.187893468,0.495331769,1],[0.639215638,0.189921182,0.494149821,1],[0.645632778,0.191951556,0.492909832,1],[0.652055535,0.19398621,0.491611196,1],[0.658483116,0.196026835,0.490253338,1],[0.664914668,0.198075202,0.488835712,1],[0.671349279,0.200133166,0.487357807,1],[0.677785975,0.202202663,0.485819154,1],[0.684223712,0.204285721,0.484219325,1],[0.69066138,0.206384461,0.482557941,1],[0.697097796,0.2085011,0.480834678,1],[0.7035317,0.210637956,0.47904927,1],[0.709961888,0.212797337,0.477201121,1],[0.716387038,0.214981693,0.47528978,1],[0.722805451,0.217193831,0.473315708,1],[0.729215521,0.219436516,0.471278924,1],[0.735615545,0.221712634,0.469179541,1],[0.742003713,0.224025196,0.467017774,1],[0.748378107,0.226377345,0.464793954,1],[0.754736692,0.228772352,0.462508534,1],[0.761077312,0.231213625,0.460162106,1],[0.767397681,0.233704708,0.457755411,1],[0.77369538,0.236249283,0.455289354,1],[0.779967847,0.23885117,0.452765022,1],[0.786212372,0.241514325,0.450183695,1],[0.792426972,0.24424225,0.447543155,1],[0.79860776,0.247039798,0.444848441,1],[0.804751511,0.24991135,0.442101615,1],[0.810854841,0.252861399,0.439304963,1],[0.816914186,0.25589455,0.436461074,1],[0.822925797,0.259015505,0.433572874,1],[0.82888574,0.262229049,0.430643647,1],[0.834790818,0.265539703,0.427671352,1],[0.84063568,0.268952874,0.42466562,1],[0.846415804,0.272473491,0.421631064,1],[0.85212649,0.276106469,0.418572767,1],[0.85776287,0.279856666,0.415496319,1],[0.863320397,0.283729003,0.412402889,1],[0.868793368,0.287728205,0.409303002,1],[0.874176342,0.291858679,0.406205397,1],[0.879463944,0.296124596,0.403118034,1],[0.884650824,0.30053009,0.40004706,1],[0.889731418,0.305078817,0.397001559,1],[0.894700194,0.309773445,0.393994634,1],[0.899551884,0.314616425,0.391036674,1],[0.904281297,0.319609981,0.388136889,1],[0.908883524,0.324755126,0.385308008,1],[0.913354091,0.330051947,0.382563414,1],[0.917688852,0.335500068,0.379915138,1],[0.921884187,0.341098112,0.377375977,1],[0.925937102,0.346843685,0.374959077,1],[0.92984509,0.352733817,0.372676513,1],[0.933606454,0.358764377,0.370540883,1],[0.937220874,0.364929312,0.368566525,1],[0.940687443,0.371224168,0.366761699,1],[0.944006448,0.377642889,0.365136328,1],[0.947179528,0.384177874,0.36370113,1],[0.95021015,0.390819546,0.362467694,1],[0.953099077,0.397562894,0.361438431,1],[0.955849237,0.404400213,0.360619076,1],[0.958464079,0.411323666,0.360014232,1],[0.960949221,0.418323245,0.359629789,1],[0.963310281,0.425389724,0.35946902,1],[0.965549351,0.432518707,0.359529151,1],[0.967671128,0.439702976,0.359810172,1],[0.969680441,0.446935635,0.36031112,1],[0.971582181,0.45421017,0.361030156,1],[0.973381238,0.461520484,0.361964652,1],[0.975082439,0.468860936,0.363111292,1],[0.976690494,0.47622635,0.364466162,1],[0.978209957,0.483612031,0.366024854,1],[0.979645181,0.491013764,0.367782559,1],[0.981000291,0.4984278,0.369734157,1],[0.982279159,0.505850848,0.371874301,1],[0.983485387,0.513280054,0.374197501,1],[0.984622298,0.520712972,0.376698186,1],[0.985692925,0.528147545,0.379370774,1],[0.986700017,0.53558207,0.382209724,1],[0.987646038,0.543015173,0.385209578,1],[0.988533173,0.550445778,0.388365009,1],[0.989363341,0.557873075,0.391670846,1],[0.990138201,0.565296495,0.395122099,1],[0.990871208,0.572706259,0.398713971,1],[0.991558165,0.580106828,0.402441058,1],[0.992195728,0.587501706,0.406298792,1],[0.992784669,0.594891088,0.410282976,1],[0.993325561,0.602275297,0.414389658,1],[0.993834412,0.60964354,0.418613221,1],[0.994308514,0.616998953,0.422949672,1],[0.994737698,0.624349657,0.427396771,1],[0.995121854,0.631696376,0.431951492,1],[0.995480469,0.639026596,0.436607159,1],[0.995809924,0.646343897,0.441360951,1],[0.996095703,0.653658756,0.446213021,1],[0.996341406,0.660969379,0.451160201,1],[0.996579803,0.668255621,0.456191814,1],[0.996774784,0.675541484,0.461314158,1],[0.996925427,0.682827953,0.466525689,1],[0.997077185,0.690087897,0.471811461,1],[0.997186253,0.697348991,0.477181727,1],[0.997253982,0.704610791,0.482634651,1],[0.99732518,0.711847714,0.488154375,1],[0.997350983,0.719089119,0.493754665,1],[0.997350583,0.726324415,0.499427972,1],[0.997341259,0.733544671,0.505166839,1],[0.997284689,0.740771893,0.510983331,1],[0.997228367,0.747980563,0.516859378,1],[0.99713848,0.755189852,0.522805996,1],[0.997019342,0.762397883,0.528820775,1],[0.996898254,0.769590975,0.534892341,1],[0.996726862,0.77679486,0.541038571,1],[0.996570645,0.783976508,0.547232992,1],[0.996369065,0.791167346,0.553498939,1],[0.996162309,0.798347709,0.559819643,1],[0.995932448,0.805527126,0.566201824,1],[0.995680107,0.812705773,0.572644795,1],[0.995423973,0.819875302,0.57914013,1],[0.995131288,0.827051773,0.585701463,1],[0.994851089,0.834212826,0.592307093,1],[0.994523666,0.841386618,0.598982818,1],[0.9942219,0.848540474,0.605695903,1],[0.993865767,0.855711038,0.612481798,1],[0.993545285,0.862858846,0.6192993,1],[0.993169558,0.870024467,0.626189463,1],[0.992830963,0.877168404,0.633109148,1],[0.992439881,0.884329694,0.640099465,1],[0.992089454,0.891469549,0.647116021,1],[0.991687744,0.89862705,0.654201544,1],[0.991331929,0.905762748,0.661308839,1],[0.990929685,0.91291501,0.668481201,1],[0.990569914,0.920048699,0.675674592,1],[0.990174637,0.927195612,0.682925602,1],[0.989814839,0.93432854,0.690198194,1],[0.989433736,0.941470354,0.697518628,1],[0.989077438,0.948604077,0.704862519,1],[0.988717064,0.95574152,0.712242232,1],[0.988367028,0.962878026,0.719648627,1],[0.988032885,0.970012413,0.727076773,1],[0.987690702,0.977154231,0.734536205,1],[0.987386827,0.984287561,0.742001547,1],[0.987052509,0.991437853,0.749504188,1]
]

const inferno = [
    [0.00146159096,0.000466127766,0.01386552,1],[0.00226726368,0.00126992553,0.018570352,1],[0.00329899092,0.00224934863,0.0242390508,1],[0.00454690615,0.00339180156,0.0309092475,1],[0.00600552565,0.00469194561,0.038557898,1],[0.00767578856,0.00613611626,0.0468360336,1],[0.00956051094,0.00771344131,0.0551430756,1],[0.0116634769,0.00941675403,0.063459808,1],[0.0139950388,0.0112247138,0.071861689,1],[0.0165605595,0.0131362262,0.0802817951,1],[0.0193732295,0.0151325789,0.0887668094,1],[0.0224468865,0.0171991484,0.0973274383,1],[0.0257927373,0.0193306298,0.105929835,1],[0.0294324251,0.0215030771,0.114621328,1],[0.0333852235,0.0237024271,0.123397286,1],[0.0376684211,0.0259207864,0.132232108,1],[0.0422525554,0.0281385015,0.141140519,1],[0.0469146287,0.0303236129,0.150163867,1],[0.0516437624,0.0324736172,0.159254277,1],[0.0564491009,0.0345691867,0.168413539,1],[0.06133972,0.0365900213,0.177642172,1],[0.066331262,0.0385036268,0.186961588,1],[0.0714289181,0.0402939095,0.196353558,1],[0.076636756,0.0419053329,0.205798788,1],[0.0819620773,0.0433278666,0.215289113,1],[0.0874113897,0.0445561662,0.224813479,1],[0.0929901526,0.0455829503,0.234357604,1],[0.0987024972,0.0464018731,0.2439037,1],[0.104550936,0.0470080541,0.2534303,1],[0.110536084,0.0473986708,0.262912235,1],[0.116656423,0.047573592,0.272320803,1],[0.122908126,0.0475360183,0.28162417,1],[0.129284984,0.0472930838,0.290788012,1],[0.13577845,0.0468563678,0.299776404,1],[0.142377819,0.0462422566,0.30855291,1],[0.149072957,0.0454676444,0.317085139,1],[0.155849711,0.0445588056,0.325338414,1],[0.162688939,0.0435542881,0.333276678,1],[0.169575148,0.0424893149,0.340874188,1],[0.176493202,0.0414017089,0.348110606,1],[0.183428775,0.0403288858,0.354971391,1],[0.190367453,0.0393088888,0.361446945,1],[0.197297425,0.0384001825,0.367534629,1],[0.204209298,0.0376322609,0.373237557,1],[0.211095463,0.0370296488,0.378563264,1],[0.217948648,0.0366146049,0.383522415,1],[0.224762908,0.0364049901,0.388128944,1],[0.231538148,0.0364052511,0.39240015,1],[0.238272961,0.0366209949,0.396353388,1],[0.244966911,0.0370545017,0.400006615,1],[0.251620354,0.0377052832,0.403377897,1],[0.258234265,0.0385706153,0.406485031,1],[0.264809649,0.0396468666,0.409345373,1],[0.271346664,0.0409215821,0.411976086,1],[0.277849829,0.0423528741,0.414392106,1],[0.284321318,0.0439325787,0.416607861,1],[0.290763373,0.0456437598,0.418636756,1],[0.297178251,0.0474700293,0.420491164,1],[0.303568182,0.0493958927,0.422182449,1],[0.309935342,0.0514069729,0.423720999,1],[0.316281835,0.0534901321,0.425116277,1],[0.322609671,0.0556335178,0.426376869,1],[0.328920763,0.0578265505,0.427510546,1],[0.335216916,0.0600598734,0.42852432,1],[0.341499828,0.0623252772,0.429424503,1],[0.347771086,0.06461561,0.430216765,1],[0.354032169,0.0669246832,0.430906186,1],[0.360284449,0.0692471753,0.431497309,1],[0.366529195,0.0715785403,0.431994185,1],[0.372767575,0.0739149211,0.432400419,1],[0.379000659,0.0762530701,0.432719214,1],[0.385228383,0.0785914864,0.432954973,1],[0.391452659,0.0809267058,0.433108763,1],[0.397674379,0.0832568129,0.433182647,1],[0.403894278,0.0855803445,0.433178526,1],[0.410113015,0.0878961593,0.433098056,1],[0.416331169,0.0902033992,0.432942678,1],[0.422549249,0.0925014543,0.432713635,1],[0.428767696,0.0947899342,0.432411996,1],[0.434986885,0.0970686417,0.432038673,1],[0.441207124,0.099337551,0.431594438,1],[0.447428382,0.101597079,0.431080497,1],[0.453650614,0.103847716,0.430497898,1],[0.459874623,0.106089165,0.429845789,1],[0.466100494,0.108321923,0.429124507,1],[0.472328255,0.110546584,0.42833432,1],[0.478557889,0.112763831,0.427475431,1],[0.484789325,0.11497443,0.426547991,1],[0.491022448,0.117179219,0.425552106,1],[0.497257069,0.119379132,0.424487908,1],[0.503492698,0.121575414,0.42335611,1],[0.509729541,0.123768654,0.422155676,1],[0.515967304,0.125959947,0.420886594,1],[0.522205646,0.128150439,0.419548848,1],[0.528444192,0.130341324,0.418142411,1],[0.534682523,0.132533845,0.416667258,1],[0.540920186,0.134729286,0.415123366,1],[0.547156706,0.136928959,0.413510662,1],[0.553391649,0.139134147,0.411828882,1],[0.559624442,0.141346265,0.410078028,1],[0.565854477,0.143566769,0.408258132,1],[0.572081108,0.14579715,0.406369246,1],[0.578303656,0.148038934,0.404411444,1],[0.584521407,0.150293679,0.402384829,1],[0.590733615,0.152562977,0.400289528,1],[0.596939751,0.154848232,0.398124897,1],[0.60313893,0.157151161,0.395891308,1],[0.609330184,0.159473549,0.393589349,1],[0.615512627,0.161817111,0.391219295,1],[0.62168534,0.164183582,0.388781456,1],[0.627847374,0.166574724,0.38627618,1],[0.633997746,0.168992314,0.383703854,1],[0.640135447,0.17143815,0.381064906,1],[0.646259648,0.173913876,0.378358969,1],[0.652369348,0.176421271,0.375586209,1],[0.658463166,0.178962399,0.372748214,1],[0.664539964,0.181539111,0.369845599,1],[0.670598572,0.184153268,0.366879025,1],[0.676637795,0.186806728,0.363849195,1],[0.682656407,0.189501352,0.360756856,1],[0.688653158,0.192238994,0.357602797,1],[0.694626769,0.1950215,0.354387853,1],[0.700575937,0.197850703,0.3511129,1],[0.706499709,0.200728196,0.347776863,1],[0.712396345,0.203656029,0.344382594,1],[0.718264447,0.206635993,0.340931208,1],[0.724102613,0.209669834,0.337423766,1],[0.729909422,0.21275927,0.333861367,1],[0.735683432,0.215905976,0.330245147,1],[0.741423185,0.219111589,0.326576275,1],[0.747127207,0.222377697,0.322855952,1],[0.752794009,0.225705837,0.31908541,1],[0.75842209,0.229097492,0.31526591,1],[0.76400994,0.232554083,0.311398734,1],[0.769556038,0.236076967,0.307485188,1],[0.775058888,0.239667435,0.303526312,1],[0.780517023,0.24332672,0.299522665,1],[0.785928794,0.247055968,0.295476756,1],[0.791292674,0.250856232,0.291389943,1],[0.796607144,0.254728485,0.287263585,1],[0.801870689,0.25867361,0.283099033,1],[0.807081807,0.262692401,0.278897629,1],[0.812239008,0.266785558,0.274660698,1],[0.817340818,0.270953688,0.270389545,1],[0.822385784,0.2751973,0.266085445,1],[0.827372474,0.279516805,0.261749643,1],[0.832299481,0.283912516,0.257383341,1],[0.837165425,0.288384647,0.2529877,1],[0.841968959,0.292933312,0.248563825,1],[0.846708768,0.297558528,0.244112767,1],[0.851383572,0.302260213,0.239635512,1],[0.85599213,0.307038188,0.235132978,1],[0.860533241,0.311892183,0.230606009,1],[0.865005747,0.316821833,0.226055368,1],[0.869408534,0.321826685,0.221481734,1],[0.87374053,0.326906201,0.216885699,1],[0.878000715,0.33205976,0.212267762,1],[0.882188112,0.337286663,0.207628326,1],[0.886301795,0.342586137,0.202967696,1],[0.890340885,0.34795734,0.19828608,1],[0.894304553,0.353399363,0.193583583,1],[0.898192017,0.35891124,0.188860212,1],[0.902002544,0.364491949,0.184115876,1],[0.905735448,0.370140419,0.179350388,1],[0.90939009,0.375855533,0.174563472,1],[0.912965874,0.381636138,0.169754764,1],[0.916462251,0.387481044,0.164923826,1],[0.91987871,0.393389034,0.160070152,1],[0.923214783,0.399358867,0.155193185,1],[0.926470039,0.405389282,0.150292329,1],[0.929644083,0.411479007,0.145366973,1],[0.932736555,0.417626756,0.140416519,1],[0.935747126,0.423831237,0.135440416,1],[0.938675494,0.430091162,0.130438175,1],[0.941521384,0.436405243,0.12540944,1],[0.944284543,0.442772199,0.120354038,1],[0.946964741,0.449190757,0.115272059,1],[0.949561766,0.455659658,0.110163947,1],[0.952075421,0.462177656,0.105030614,1],[0.954505523,0.468743522,0.0998735931,1],[0.956851903,0.475356048,0.0946952268,1],[0.959114397,0.482014044,0.0894989073,1],[0.96129285,0.488716345,0.0842893891,1],[0.96338711,0.495461806,0.0790731907,1],[0.965397031,0.502249309,0.0738591143,1],[0.967322465,0.509077761,0.0686589199,1],[0.969163264,0.515946092,0.0634881971,1],[0.970919277,0.522853259,0.058367489,1],[0.972590351,0.529798246,0.0533237243,1],[0.974176327,0.536780059,0.048392009,1],[0.975677038,0.543797733,0.0436177922,1],[0.977092313,0.550850323,0.0390500131,1],[0.978421971,0.557936911,0.0349306227,1],[0.979665824,0.5650566,0.0314091591,1],[0.980823673,0.572208516,0.0285075931,1],[0.981895311,0.579391803,0.0262497353,1],[0.982880522,0.586605627,0.0246613416,1],[0.983779081,0.593849168,0.0237702263,1],[0.984590755,0.601121626,0.0236063833,1],[0.985315301,0.608422211,0.0242021174,1],[0.985952471,0.615750147,0.0255921853,1],[0.986502013,0.623104667,0.0278139496,1],[0.98696367,0.630485011,0.0309075459,1],[0.987337182,0.637890424,0.0349160639,1],[0.987622296,0.645320152,0.0398857472,1],[0.987818759,0.652773439,0.0455808037,1],[0.98792633,0.660249526,0.0517503867,1],[0.987944783,0.667747641,0.0583286889,1],[0.98787391,0.675267,0.0652570167,1],[0.987713535,0.682806802,0.072489233,1],[0.987463516,0.690366218,0.0799897176,1],[0.987123759,0.697944391,0.0877314215,1],[0.986694229,0.705540424,0.0956941797,1],[0.98617497,0.713153375,0.103863324,1],[0.985565739,0.72078246,0.112228756,1],[0.984865203,0.728427497,0.120784651,1],[0.984075129,0.736086521,0.129526579,1],[0.983195992,0.743758326,0.138453063,1],[0.982228463,0.751441596,0.147564573,1],[0.981173457,0.759134892,0.156863224,1],[0.980032178,0.766836624,0.166352544,1],[0.978806183,0.774545028,0.176037298,1],[0.977497453,0.782258138,0.185923357,1],[0.976108474,0.789973753,0.196017589,1],[0.974637842,0.797691563,0.206331925,1],[0.973087939,0.805409333,0.216876839,1],[0.971467822,0.813121725,0.227658046,1],[0.969783146,0.820825143,0.238685942,1],[0.968040817,0.828515491,0.249971582,1],[0.966242589,0.836190976,0.261533898,1],[0.964393924,0.843848069,0.273391112,1],[0.962516656,0.85147634,0.285545675,1],[0.960625545,0.859068716,0.298010219,1],[0.958720088,0.866624355,0.310820466,1],[0.956834075,0.874128569,0.323973947,1],[0.954997177,0.881568926,0.337475479,1],[0.953215092,0.888942277,0.351368713,1],[0.951546225,0.896225909,0.365627005,1],[0.950018481,0.903409063,0.380271225,1],[0.948683391,0.910472964,0.395289169,1],[0.947594362,0.917399053,0.410665194,1],[0.946809163,0.924168246,0.426373236,1],[0.946391536,0.930760752,0.442367495,1],[0.946402951,0.937158971,0.458591507,1],[0.946902568,0.943347775,0.474969778,1],[0.947936825,0.949317522,0.491426053,1],[0.94954483,0.9550629,0.507859649,1],[0.951740304,0.960586693,0.524203026,1],[0.954529281,0.965895868,0.540360752,1],[0.957896053,0.97100333,0.55627509,1],[0.96181202,0.975924241,0.571925382,1],[0.966248822,0.980678193,0.587205773,1],[0.971161622,0.985282161,0.60215433,1],[0.976510983,0.989753437,0.616760413,1],[0.982257307,0.994108844,0.631017009,1],[0.988362068,0.998364143,0.644924005,1]
]

const plasma = [
    [0.0503832136,0.0298028976,0.527974883,1],[0.0635363639,0.0284259729,0.533123681,1],[0.0753531234,0.0272063728,0.538007001,1],[0.0862217979,0.0261253206,0.542657691,1],[0.0963786097,0.0251650976,0.547103487,1],[0.105979704,0.0243092436,0.551367851,1],[0.115123641,0.02355625,0.555467728,1],[0.123902903,0.0228781011,0.55942348,1],[0.13238072,0.0222583774,0.563250116,1],[0.140603076,0.0216866674,0.566959485,1],[0.148606527,0.0211535876,0.570561711,1],[0.156420649,0.0206507174,0.574065446,1],[0.164069722,0.0201705326,0.577478074,1],[0.171573925,0.0197063415,0.58080589,1],[0.178950212,0.0192522243,0.584054243,1],[0.186212958,0.0188029767,0.587227661,1],[0.193374449,0.0183540593,0.590329954,1],[0.20044526,0.0179015512,0.593364304,1],[0.207434551,0.0174421086,0.596333341,1],[0.214350298,0.0169729276,0.599239207,1],[0.22119675,0.0164970484,0.602083323,1],[0.227982971,0.0160071509,0.604867403,1],[0.234714537,0.0155015065,0.607592438,1],[0.241396253,0.0149791041,0.610259089,1],[0.248032377,0.0144393586,0.612867743,1],[0.25462669,0.0138820918,0.615418537,1],[0.261182562,0.0133075156,0.617911385,1],[0.267702993,0.0127162163,0.620345997,1],[0.274190665,0.0121091423,0.622721903,1],[0.280647969,0.0114875915,0.625038468,1],[0.287076059,0.0108554862,0.627294975,1],[0.293477695,0.0102128849,0.62949049,1],[0.299855122,0.00956079551,0.631623923,1],[0.306209825,0.00890185346,0.633694102,1],[0.312543124,0.00823900704,0.635699759,1],[0.318856183,0.00757551051,0.637639537,1],[0.325150025,0.00691491734,0.639512001,1],[0.331425547,0.00626107379,0.641315649,1],[0.337683446,0.00561830889,0.643048936,1],[0.343924591,0.0049905308,0.644710195,1],[0.350149699,0.00438202557,0.646297711,1],[0.356359209,0.00379781761,0.647809772,1],[0.362553473,0.00324319591,0.649244641,1],[0.368732762,0.00272370721,0.650600561,1],[0.37489727,0.00224514897,0.651875762,1],[0.381047116,0.00181356205,0.653068467,1],[0.387182639,0.00143446923,0.654176761,1],[0.39330401,0.00111388259,0.655198755,1],[0.399410821,0.000859420809,0.656132835,1],[0.405502914,0.000678091517,0.656977276,1],[0.411580082,0.000577101735,0.65773038,1],[0.417642063,0.000563847476,0.658390492,1],[0.423688549,0.00064590278,0.658956004,1],[0.429719186,0.000831008207,0.659425363,1],[0.435733575,0.00112705875,0.659797077,1],[0.441732123,0.00153984779,0.660069009,1],[0.4477136,0.00207954744,0.660240367,1],[0.453677394,0.00275470302,0.660309966,1],[0.459622938,0.00357374415,0.660276655,1],[0.465549631,0.00454518084,0.660139383,1],[0.471456847,0.00567758762,0.65989721,1],[0.477343929,0.00697958743,0.659549311,1],[0.483210198,0.00845983494,0.659094989,1],[0.489054951,0.0101269996,0.658533677,1],[0.494877466,0.0119897486,0.657864946,1],[0.500677687,0.014055064,0.657087561,1],[0.506454143,0.0163333443,0.656202294,1],[0.512206035,0.0188332232,0.655209222,1],[0.51793258,0.0215631918,0.654108545,1],[0.52363299,0.0245316468,0.652900629,1],[0.529306474,0.0277468735,0.65158601,1],[0.534952244,0.03121703,0.650165396,1],[0.54056951,0.034950131,0.648639668,1],[0.546157494,0.0389540334,0.647009884,1],[0.551715423,0.0431364795,0.645277275,1],[0.557242538,0.0473307585,0.64344325,1],[0.562738096,0.0515448092,0.641509389,1],[0.568201372,0.0557776706,0.63947744,1],[0.573631859,0.0600281369,0.637348841,1],[0.579028682,0.0642955547,0.635126108,1],[0.584391137,0.0685790261,0.632811608,1],[0.589718606,0.0728775875,0.630407727,1],[0.595010505,0.0771902878,0.627916992,1],[0.600266283,0.0815161895,0.625342058,1],[0.605485428,0.0858543713,0.622685703,1],[0.610667469,0.0902039303,0.619950811,1],[0.615811974,0.0945639838,0.617140367,1],[0.620918555,0.0989336721,0.61425744,1],[0.625986869,0.10331216,0.611305174,1],[0.631016615,0.107698641,0.608286774,1],[0.636007543,0.112092335,0.605205491,1],[0.640959444,0.116492495,0.602064611,1],[0.645872158,0.120898405,0.598867442,1],[0.650745571,0.125309384,0.5956173,1],[0.655579615,0.129724785,0.592317494,1],[0.660374266,0.134143997,0.588971318,1],[0.665129493,0.138566428,0.585582301,1],[0.669845385,0.14299154,0.582153572,1],[0.67452206,0.147418835,0.578688247,1],[0.679159664,0.151847851,0.575189431,1],[0.683758384,0.156278163,0.571660158,1],[0.68831844,0.160709387,0.56810338,1],[0.692840088,0.165141174,0.564521958,1],[0.697323615,0.169573215,0.560918659,1],[0.701769334,0.174005236,0.557296144,1],[0.70617759,0.178437,0.55365697,1],[0.710548747,0.182868306,0.550003579,1],[0.714883195,0.187298986,0.546338299,1],[0.719181339,0.191728906,0.542663338,1],[0.723443604,0.196157962,0.538980786,1],[0.727670428,0.200586086,0.535292612,1],[0.731862231,0.205013174,0.531600995,1],[0.736019424,0.209439071,0.527908434,1],[0.740142557,0.213863965,0.524215533,1],[0.744232102,0.218287899,0.520523766,1],[0.748288533,0.222710942,0.516834495,1],[0.752312321,0.227133187,0.513148963,1],[0.756303937,0.231554749,0.509468305,1],[0.760263849,0.235975765,0.505793543,1],[0.764192516,0.240396394,0.502125599,1],[0.768090391,0.244816813,0.49846529,1],[0.771957916,0.24923722,0.494813338,1],[0.775795522,0.253657797,0.491170517,1],[0.779603614,0.258078397,0.487539124,1],[0.783382636,0.262499662,0.483917732,1],[0.787132978,0.266921859,0.480306702,1],[0.790855015,0.271345267,0.476706319,1],[0.794549101,0.275770179,0.473116798,1],[0.798215577,0.280196901,0.469538286,1],[0.801854758,0.28462575,0.465970871,1],[0.805466945,0.289057057,0.46241458,1],[0.809052419,0.293491117,0.458869577,1],[0.812611506,0.297927865,0.455337565,1],[0.816144382,0.30236813,0.451816385,1],[0.819651255,0.306812282,0.448305861,1],[0.823132309,0.311260703,0.444805781,1],[0.826587706,0.315713782,0.441315901,1],[0.830017584,0.320171913,0.437835947,1],[0.833422053,0.324635499,0.434365616,1],[0.836801237,0.329104836,0.430905052,1],[0.840155276,0.333580106,0.427454836,1],[0.843484103,0.338062109,0.424013059,1],[0.846787726,0.342551272,0.420579333,1],[0.850066132,0.347048028,0.417153264,1],[0.853319279,0.351552815,0.413734445,1],[0.856547103,0.356066072,0.410322469,1],[0.85974952,0.360588229,0.406916975,1],[0.862926559,0.365119408,0.403518809,1],[0.86607792,0.369660446,0.400126027,1],[0.869203436,0.374211795,0.396738211,1],[0.872302917,0.37877391,0.393354947,1],[0.875376149,0.383347243,0.389975832,1],[0.878422895,0.387932249,0.386600468,1],[0.881442916,0.392529339,0.383228622,1],[0.884435982,0.397138877,0.379860246,1],[0.887401682,0.401761511,0.376494232,1],[0.890339687,0.406397694,0.373130228,1],[0.893249647,0.411047871,0.369767893,1],[0.896131191,0.415712489,0.366406907,1],[0.898983931,0.420391986,0.363046965,1],[0.901807455,0.425086807,0.359687758,1],[0.904601295,0.429797442,0.356328796,1],[0.907364995,0.434524335,0.352969777,1],[0.910098088,0.439267908,0.349610469,1],[0.912800095,0.444028574,0.346250656,1],[0.915470518,0.448806744,0.342890148,1],[0.918108848,0.453602818,0.339528771,1],[0.920714383,0.45841742,0.336165582,1],[0.92328666,0.463250828,0.332800827,1],[0.925825146,0.468103387,0.329434512,1],[0.928329275,0.472975465,0.32606655,1],[0.930798469,0.47786742,0.322696876,1],[0.93323214,0.482779603,0.319325444,1],[0.935629684,0.487712357,0.315952211,1],[0.937990034,0.492666544,0.31257544,1],[0.940312939,0.497642038,0.309196628,1],[0.942597771,0.502639147,0.305815824,1],[0.944843893,0.507658169,0.302433101,1],[0.947050662,0.51269939,0.299048555,1],[0.949217427,0.517763087,0.295662308,1],[0.95134353,0.522849522,0.292274506,1],[0.953427725,0.52795955,0.288883445,1],[0.95546964,0.533093083,0.285490391,1],[0.95746877,0.538250172,0.282096149,1],[0.95942443,0.543431038,0.27870099,1],[0.96133593,0.54863589,0.275305214,1],[0.963202573,0.553864931,0.271909159,1],[0.965023656,0.559118349,0.2685132,1],[0.96679847,0.564396327,0.265117752,1],[0.968525639,0.569699633,0.261721488,1],[0.970204593,0.57502827,0.258325424,1],[0.971835007,0.580382015,0.254931256,1],[0.973416145,0.585761012,0.251539615,1],[0.974947262,0.591165394,0.2481512,1],[0.976427606,0.596595287,0.244766775,1],[0.977856416,0.602050811,0.241387186,1],[0.979232922,0.607532077,0.238013359,1],[0.980556344,0.61303919,0.234646316,1],[0.98182589,0.61857225,0.231287178,1],[0.983040742,0.624131362,0.227937141,1],[0.984198924,0.629717516,0.224595006,1],[0.98530076,0.635329876,0.221264889,1],[0.986345421,0.640968508,0.217948456,1],[0.987332067,0.646633475,0.214647532,1],[0.988259846,0.652324832,0.211364122,1],[0.989127893,0.65804263,0.208100426,1],[0.989935328,0.663786914,0.204858855,1],[0.990681261,0.66955772,0.201642049,1],[0.991364787,0.675355082,0.1984529,1],[0.99198499,0.681179025,0.195294567,1],[0.992540939,0.687029567,0.1921705,1],[0.993031693,0.692906719,0.189084459,1],[0.993456302,0.698810484,0.186040537,1],[0.993813802,0.704740854,0.18304318,1],[0.994103226,0.710697814,0.180097207,1],[0.994323596,0.716681336,0.177207826,1],[0.994473934,0.722691379,0.174380656,1],[0.99455326,0.72872789,0.171621733,1],[0.994560594,0.734790799,0.168937522,1],[0.994494964,0.74088002,0.166334918,1],[0.994355411,0.746995448,0.163821243,1],[0.994140989,0.753136955,0.161404226,1],[0.993850778,0.75930439,0.159091984,1],[0.99348219,0.765498551,0.156890625,1],[0.993033251,0.771719833,0.154807583,1],[0.992505214,0.777966775,0.152854862,1],[0.99189727,0.78423912,0.151041581,1],[0.99120868,0.790536569,0.149376885,1],[0.990438793,0.796858775,0.14786981,1],[0.989587065,0.803205337,0.146529128,1],[0.988647741,0.809578605,0.145357284,1],[0.987620557,0.815977942,0.144362644,1],[0.986509366,0.82240062,0.143556679,1],[0.985314198,0.82884598,0.142945116,1],[0.984031139,0.83531536,0.142528388,1],[0.98265282,0.84181173,0.142302653,1],[0.981190389,0.848328902,0.142278607,1],[0.979643637,0.854866468,0.142453425,1],[0.977994918,0.861432314,0.142808191,1],[0.976264977,0.868015998,0.143350944,1],[0.974443038,0.874622194,0.144061156,1],[0.972530009,0.881250063,0.144922913,1],[0.970532932,0.887896125,0.145918663,1],[0.968443477,0.894563989,0.147014438,1],[0.966271225,0.901249365,0.148179639,1],[0.964021057,0.907950379,0.149370428,1],[0.961681481,0.914672479,0.150520343,1],[0.959275646,0.921406537,0.151566019,1],[0.956808068,0.928152065,0.152409489,1],[0.954286813,0.93490773,0.152921158,1],[0.951726083,0.941670605,0.152925363,1],[0.949150533,0.9484349,0.152177604,1],[0.94660227,0.95518986,0.150327944,1],[0.944151742,0.961916487,0.146860789,1],[0.94189612,0.968589814,0.140955606,1],[0.940015097,0.975158357,0.131325517,1]
]

const palette = inferno

function toHex(d) {
  return ("0"+(Number(d).toString(16))).slice(-2).toUpperCase()
}

var html_palette = _.map(palette, function(x) {
    var r = toHex(Math.round(x[0] * 255))
    var g = toHex(Math.round(x[1] * 255))
    var b = toHex(Math.round(x[2] * 255))
    return '#' + r + g + b
})

var linearGradient = svg.append("defs")
                       .append("linearGradient")
                       .attr("id", "linear-gradient")
                       .attr("x1", "0%")
                       .attr("y1", "100%")
                       .attr("x2", "0%")
                       .attr("y2", "0%")

var getStopColor = function(d) {return html_palette[Math.round(d/100*(html_palette.length-1))]}

for(var i = 0; i <= 100; i++) {
    linearGradient.append("stop")
                  .attr("offset", i + "%")
                  .attr("stop-color", getStopColor(i))
}

// Color scale rect
g.append("rect").attr("id", "colorscale-rect")
                .attr("x", 0)
                .attr("y", 0)
                .attr("width", scale_width)
                .attr("height", scale_height)
                .style("fill", "url(#linear-gradient)")
                .style("stroke", "white")

// Top rect
g.append("rect").attr("id", "top-exclude-rect")
                .attr("x", 0)
                .attr("y", 0)
                .attr("width", scale_width)
                .attr("height", scale_height)
                .style("fill", "black")
                .style("stroke", "white")
                .style("display", "none")

g.append("rect").attr("id", "middle-exclude-rect")
                .attr("x", 0)
                .attr("y", 0)
                .attr("width", scale_width)
                .attr("height", scale_height)
                .style("fill", "black")
                .style("stroke", "white")
                .style("display", "none")

g.append("rect").attr("id", "bottom-exclude-rect")
                .attr("x", 0)
                .attr("y", 0)
                .attr("width", scale_width)
                .attr("height", scale_height)
                .style("fill", "black")
                .style("stroke", "white")
                .style("display", "none")

var clicked = false
var invertFilter = false;
function brushstart() {
  if(clicked) {//if true then double clicked
    invertFilter = !invertFilter
    //set flag to false
    clicked=false;
  } else {
    //timeout to reset the flag after 500 milliseconds of 1st mouse down.
    setTimeout(function(){clicked=false;}, 500);
  }
  clicked = !clicked;
}

function brushmoved() {
  var s = d3.event.selection;

  maxFilter = 1-s[0]*1.0/scale_height
  minFilter = 1-s[1]/scale_height

  if(!invertFilter) {
    d3.select("#middle-exclude-rect").style("display", "none")

    d3.select("#top-exclude-rect").attr("y", 0)
                                  .attr("height", s[0])
                                  .style("display", null)
    d3.select("#bottom-exclude-rect").attr("y", s[1])
                                     .attr("height", scale_height - s[1])
                                     .style("display", null)
  }
  else {
    d3.select("#middle-exclude-rect").attr("y", s[0])
                                     .attr("height", s[1] - s[0])
                                     .style("display", null)

    d3.select("#top-exclude-rect").style("display", "none")
    d3.select("#bottom-exclude-rect").style("display", "none")
  }

  brush_handle.attr("display", null).attr("transform", function(d, i) { return "translate(" + scale_width/2 + "," + s[i] + ")"; });
}

g.append("g")
    .attr("class", "axis axis--y axis-white")
    .attr("transform", "translate(" + scale_width + ", 0)")
    .call(d3.axisRight(yScale));

var gBrush = g.append("g")
    .attr("class", "brush")
    .call(brush);

var brush_overlay = gBrush.selectAll(".selection")
    .attr("fill", "white")
    .attr("fill-opacity", "0.0")
    .attr("stroke", "white")
    .attr("stroke-width", 3)

var brush_handle = gBrush.selectAll(".handle--custom")
  .data([{type: "n"}, {type: "s"}])
  .enter().append("path")
    .attr("class", "handle--custom")
    .attr("fill", "white")
    .attr("stroke", "black")
    .attr("stroke-width", 1.5)
    .attr("cursor", "n-resize")
    .attr("d", d3.arc()
        .innerRadius(0)
        .outerRadius(scale_width / 4)
        .startAngle(Math.PI/2)
        .endAngle(function(d, i) { return i ? 1.5*Math.PI : -Math.PI/2; }));

gBrush.call(brush.move, [maxVal, minVal].map(yScale));


const voxel_size = 0.5
// Voxel is made of 8 vertices (one for each corner of cube)
const voxel_verts = [
  // Front
  -1, -1,  1, // 0
   1, -1,  1, // 1
  -1,  1,  1, // 2
   1,  1,  1, // 3

   // Back
  -1, -1, -1, // 4
   1, -1, -1, // 5
  -1,  1, -1, // 6
   1,  1, -1, // 7

   // Top
   -1, -1, -1, // 8
    1, -1, -1, // 9
   -1, -1,  1, // 10
    1, -1,  1, // 11
   
   // Bottom
   -1,  1,  1, // 12
    1,  1,  1, // 13
   -1,  1, -1, // 14
    1,  1, -1, // 15

   // Left
   -1, -1, -1, // 16
   -1, -1,  1, // 17
   -1,  1, -1, // 18
   -1,  1,  1, // 19

   // Right
    1, -1,  1, // 20
    1, -1, -1, // 21
    1,  1,  1, // 22
    1,  1, -1  // 23
]
// These indices define the trianges composing the faces of the voxel
const voxel_indices = [
     0,  1,  2,       1,  3,  2,   // front
     5,  4,  7,       4,  6,  7,   // back
     8,  9, 10,       9, 11, 10,   // top
    12, 13, 14,      13, 15, 14,   // bottom
    16, 17, 18,      17, 19, 18,   // left
    20, 21, 22,      21, 23, 22    // right
]
const voxel_normals = [
  // Front
   0,  0,  1, // 0
   0,  0,  1, // 1
   0,  0,  1, // 2
   0,  0,  1, // 3

  // Back
   0,  0, -1, // 4
   0,  0, -1, // 5
   0,  0, -1, // 6
   0,  0, -1, // 7

   // Top
   0, -1,  0, // 8
   0, -1,  0, // 9
   0, -1,  0, // 10
   0, -1,  0, // 11
   
   // Bottom
   0,  1,  0, // 12
   0,  1,  0, // 13
   0,  1,  0, // 14
   0,  1,  0, // 15

   // Left
   -1,  0,  0, // 16
   -1,  0,  0, // 17
   -1,  0,  0, // 18
   -1,  0,  0, // 19

   // Right
    1, 0, 0, // 20
    1, 0, 0, // 21
    1, 0, 0, // 22
    1, 0, 0  // 23
]

var mouseDown = false
var lastMouseX = null
var lastMouseY = null

// var cubeRotation = { x: 0, y: 0.0, z: 0 }
// var rotationVelocity = { x: 0, y: 0, z: 0 }

var cubeRotation = { x: 0, y: 0.4, z: 0 }
var rotationVelocity = { x: 1/100, y: 0, z: 0 }

var minCubeRotationY = -Math.PI/2
var maxCubeRotationY = Math.PI/2

var distance = -2*_.max([dims.x, dims.y, dims.z])
var minDistance = 0;
var maxDistance = -3*_.max([dims.x, dims.y, dims.z])

function handleMouseDown(event) {
  if (mouseDown) {
    return;
  }

  mouseDown = true;
  lastMouseX = event.clientX;
  lastMouseY = event.clientY;
}

function handleMouseUp(event) {
  mouseDown = false;
}

function handleMouseMove(event) {
  if (!mouseDown) {
    return;
  }

  var newX = event.clientX;
  var newY = event.clientY;

  if(Math.abs(newX - lastMouseX) <= 1) {
    rotationVelocity.x = 0
  }
  else {
    rotationVelocity.x = 0.003 * (newX - lastMouseX)
  }
  cubeRotation.x += rotationVelocity.x

  cubeRotation.y += 0.01 * (newY - lastMouseY)
  if(cubeRotation.y < minCubeRotationY) {
    cubeRotation.y = minCubeRotationY
  }
  if(cubeRotation.y > maxCubeRotationY) {
    cubeRotation.y = maxCubeRotationY
  }

  lastMouseX = newX
  lastMouseY = newY
}

function handleMouseWheel(event) {
  distance -= 0.05 * Math.sqrt(dims.x^2 + dims.y^2 + dims.z^2) * event.deltaY
}

var currentlyPressedKeys = {};

function handleKeyDown(event) {
  // Stop rotation
  rotationVelocity = { x: 0, y: 0, z: 0 }

  // Up key
  if(event.keyCode == 38) {
    //if(cubeRotation.x == 0 && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:0,y:Math.PI/2,z:0}
  }
  // Down key
  if(event.keyCode == 40) {
    cubeRotation = {x:0,y:-Math.PI/2,z:0}
  }
  // Right key
  if(event.keyCode == 39) {
    if(cubeRotation.x == 0 && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:-Math.PI/2,y:0,z:0}
    }
    else if(cubeRotation.x == -Math.PI/2 && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:-Math.PI,y:0,z:0}
    }
    else if(cubeRotation.x == -Math.PI && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:-3*Math.PI/2,y:0,z:0}
    }
    else {
        cubeRotation = {x:0,y:0,z:0}
    }
  }
  // Left key
  if(event.keyCode == 37) {
    if(cubeRotation.x == 0 && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:Math.PI/2,y:0,z:0}
    }
    else if(cubeRotation.x == Math.PI/2 && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:Math.PI,y:0,z:0}
    }
    else if(cubeRotation.x == Math.PI && cubeRotation.y == 0 && cubeRotation.z == 0) {
      cubeRotation = {x:3*Math.PI/2,y:0,z:0}
    }
    else {
        cubeRotation = {x:0,y:0,z:0}
    }
  }
}

function handleKeyUp(event) {
  
}

main()

function getWebGLContext(canvas, target, antialiasing) {
  var gl = null;
  try {
    gl = canvas.getContext(target, { antialias: antialiasing });
    if (!gl) {
      gl = canvas.getContext("experimental-" + target, { antialias: antialiasing });
    }
    gl.viewportWidth = canvas.width;
    gl.viewportHeight = canvas.height;
  } catch (e) {
  }
  if (!gl) {
    alert("Could not create a " + target + " context!");
  }
  return gl;
}

function throwOnGLError(err, funcName, args) {
  throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to: " + funcName;
};

function logGLCall(functionName, args) {   
   console.log("gl." + functionName + "(" + 
      WebGLDebugUtils.glFunctionArgsToString(functionName, args) + ")");   
} 

function validateNoneOfTheArgsAreUndefined(functionName, args) {
  for (var ii = 0; ii < args.length; ++ii) {
    if (args[ii] === undefined) {
      console.error("undefined passed to gl." + functionName + "(" +
                     WebGLDebugUtils.glFunctionArgsToString(functionName, args) + ")");
    }
  }
} 

function logAndValidate(functionName, args) {
  logGLCall(functionName, args);
   validateNoneOfTheArgsAreUndefined (functionName, args);
}

function main() {
  const canvas = document.querySelector('#glcanvas')
  const ctx = getWebGLContext(canvas, "webgl2", true);
  const gl = debug ? WebGLDebugUtils.makeDebugContext(ctx, throwOnGLError, logAndValidate) : getWebGLContext(canvas, "webgl2", true);
  resize(gl.canvas);

  canvas.onmousedown = handleMouseDown;
  document.onmouseup = handleMouseUp;
  document.onmousemove = handleMouseMove;
  document.onkeydown = handleKeyDown;
  document.onkeyup = handleKeyUp;
  canvas.addEventListener("wheel", handleMouseWheel)

  // Vertex shader
  const vsSource = `
    attribute vec4 aVertexPosition;
    attribute float aTextureCoord;
    attribute vec3 aVertexNormal;
    attribute vec3 aInstancedOffset;

    uniform mat4 uNormalMatrix;
    uniform mat4 uModelViewMatrix;
    uniform mat4 uProjectionMatrix;

    uniform bool uInvertFilter;
    uniform float uMinFilter;
    uniform float uMaxFilter;

    varying highp vec2 vTextureCoord;
    varying highp vec3 vLighting;

    void main(void) {
      vec4 vertexPos = aVertexPosition;
      vertexPos.xyz += aInstancedOffset;

      highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);
      highp vec3 directionalLightColor = vec3(1, 1, 1);
      highp vec3 directionalVector = normalize(vec3(0, 0, 1));
      highp vec4 transformedNormal = uNormalMatrix * vec4(aVertexNormal, 1.0);
      highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);
      vLighting = ambientLight + (directionalLightColor * directional);

      if(!uInvertFilter && (aTextureCoord >= uMinFilter && aTextureCoord <= uMaxFilter)) {
        gl_Position = uProjectionMatrix * uModelViewMatrix * vertexPos;
        vTextureCoord = vec2(aTextureCoord, 0);
      }
      else if(uInvertFilter && (aTextureCoord < uMinFilter || aTextureCoord > uMaxFilter)) {
        gl_Position = uProjectionMatrix * uModelViewMatrix * vertexPos;
        vTextureCoord = vec2(aTextureCoord, 0);
      }
      else {
        gl_Position = vec4(1000, 1000, 1000, 1);
        vTextureCoord = vec2(0, 0);
      }
    }
  `

  // Fragment shader
  const fsSource = `
    uniform sampler2D uSampler;
    varying highp vec2 vTextureCoord;
    varying highp vec3 vLighting;
    
    void main(void) {
      highp vec4 texelColor = texture2D(uSampler, vTextureCoord);
      gl_FragColor = vec4(texelColor.rgb * vLighting, texelColor.a);
    }
  `

  const shaderProgram = initShaderProgram(gl, vsSource, fsSource)
  const programInfo = {
    program: shaderProgram,
    attribLocations: {
      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
      textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord'),
      vertexNormal: gl.getAttribLocation(shaderProgram, 'aVertexNormal'),
      instanceOffset: gl.getAttribLocation(shaderProgram, 'aInstancedOffset')
    },
    uniformLocations: {
      projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
      modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),
      normalMatrix: gl.getUniformLocation(shaderProgram, 'uNormalMatrix'),
      uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),
      invertFilter: gl.getUniformLocation(shaderProgram, "uInvertFilter"),
      minFilter: gl.getUniformLocation(shaderProgram, "uMinFilter"),
      maxFilter: gl.getUniformLocation(shaderProgram, "uMaxFilter")
    },
  }
  
  var buffers = initBuffers(gl)

  var colormap = loadTexture(gl, magma)

  const fpsDisplay = document.querySelector("#fps");

  // Main draw loop.
  var then = 0
  var lastFps = 60
  function render(now) {
    now *= 0.002  // convert to seconds
    const deltaTime = now - then
    then = now

    fps = (lastFps + 1 / deltaTime)/2
    lastFps = fps
    fpsDisplay.textContent = fps.toFixed(1)
    
    drawScene(gl, programInfo, buffers, colormap, deltaTime)
    
    requestAnimationFrame(render)
  }
  
  requestAnimationFrame(render)
}

// Map value for voxel to a color.
function getColor(value) {
    if(value < minVal || value > maxVal || minVal > maxVal) {
        throw "getColor outside of range"
    }
  
    var normalized_value = (value - minVal)/(maxVal - minVal)
    var loc = Math.round(normalized_value*(palette.length-1))
    var c = palette[loc]
    return [c[0], c[1], c[2], normalized_value]
}

function generateArrayBuffer(gl, data, type, itemsize) {
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, type);
  buffer.itemSize = itemsize;
  buffer.numItems = data.length / itemsize;
  return buffer;
}

function generateElementArrayBuffer(gl, data, type, itemsize) {
  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, type);
  buffer.itemSize = itemsize;
  buffer.numItems = data.length / itemsize;
  return buffer;
}

function initBuffers(gl) {
  var offsets = new Array(3*dps.length)
  var texCoords = new Array(dps.length)
  for (var i = 0; i < dps.length; i++) {
    const dp = dps[i]
    offsets[3*i] = dp.x
    offsets[3*i+1] = dp.y
    offsets[3*i+2] = dp.z
    texCoords[2*i] = 1-(dp.v - minVal)/(maxVal - minVal)
  }

  var verts = new Array(voxel_verts.length)
  for(var i = 0; i < voxel_verts.length; i++){
    verts[i] = voxel_size*voxel_verts[i]
  }
  var vertices = generateArrayBuffer(gl, new Float32Array(verts), gl.STATIC_DRAW, 3)
  var instanceOffsets = generateArrayBuffer(gl, new Float32Array(offsets), gl.STATIC_DRAW, 3)

  var textureCoords = generateArrayBuffer(gl, new Float32Array(texCoords), gl.STATIC_DRAW, 1)

  var vertexNormals = generateArrayBuffer(gl, new Float32Array(voxel_normals), gl.STATIC_DRAW, 3)

  var indexBuffer = generateElementArrayBuffer(gl, new Uint16Array(voxel_indices), gl.STATIC_DRAW, 3)

  return {
    vertices: vertices,
    instanceOffsets: instanceOffsets,
    textureCoords: textureCoords,
    vertexNormals: vertexNormals,
    indices: indexBuffer
  }
}

function loadTexture(gl, palette) {
  var pixels = []
  for(var j = 0; j < palette.length; j++) {
    var r = Math.round(255*palette[j][0])
    var g = Math.round(255*palette[j][1])
    var b = Math.round(255*palette[j][2])
    pixels = pixels.concat(r, g, b, 255)
  }

  const texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);

  const level = 0;
  const internalFormat = gl.RGBA;
  const width = 256;
  const height = 1;
  const border = 0;
  const srcFormat = gl.RGBA;
  const srcType = gl.UNSIGNED_BYTE;
  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,
                width, height, border, srcFormat, srcType,
                new Uint8Array(pixels));
 
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  
  return texture;
}

function resize(canvas) {
  // Lookup the size the browser is displaying the canvas.
  var displayWidth  = window.innerWidth;
  var displayHeight = window.innerHeight;

  // Check if the canvas is not the same size.
  if (canvas.width  != displayWidth || canvas.height != displayHeight) {
    // Make the canvas the same size
    canvas.width  = displayWidth;
    canvas.height = displayHeight;
  }

  document.body.scrollTop = 0; // <-- pull the page back up to the top
  document.body.style.overflow = 'hidden'; // <-- relevant addition
}

//
// Draw the scene.
//
function drawScene(gl, programInfo, buffers, texture, deltaTime) {
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

  gl.clearColor(0.0, 0.0, 0.0, 1.0)  // Clear to black
  gl.clearDepth(1.0)                 // Clear everything
  gl.enable(gl.DEPTH_TEST)           // Enable depth testing
  gl.enable(gl.CULL_FACE)
  gl.cullFace(gl.BACK)
  //gl.enable(gl.BLEND)
  //gl.blendEquation(gl.FUNC_ADD)
  //gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
  gl.depthFunc(gl.LEQUAL)            // Near things obscure far things

  // Clear the canvas before we start drawing on it.

  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
  gl.depthMask(true)
  // Create a perspective matrix, a special matrix that is
  // used to simulate the distortion of perspective in a camera.
  // Our field of view is 45 degrees, with a width/height
  // ratio that matches the display size of the canvas
  // and we only want to see objects between 0.1 units
  // and 100 units away from the camera.

  const fieldOfView = 45 * Math.PI / 180   // in radians
  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight
  const zNear = 0.1
  const zFar = dims.x*dims.y*dims.z
  const projectionMatrix = mat4.create()

  // note: glmatrix.js always has the first argument
  // as the destination to receive the result.
  mat4.perspective(projectionMatrix,
                   fieldOfView,
                   aspect,
                   zNear,
                   zFar)

  // Set the drawing position to the "identity" point, which is
  // the center of the scene.
  const modelViewMatrix = mat4.create()

  // Now move the drawing position a bit to where we want to
  // start drawing the square.

  
  // move
  mat4.translate(modelViewMatrix,     // destination matrix
                 modelViewMatrix,     // matrix to translate
                 [0, 0, distance])  // amount to translate
  // Look at from above
  mat4.rotate(modelViewMatrix,  // destination matrix
              modelViewMatrix,  // matrix to rotate
              cubeRotation.y,     // amount to rotate in radians
              [1, 0, 0])       // axis to rotate around (X)
  // Spin
  
  mat4.rotate(modelViewMatrix,  // destination matrix
              modelViewMatrix,  // matrix to rotate
              cubeRotation.x,// amount to rotate in radians
              [0, 1, 0])       // axis to rotate around (X)
  // Update the rotation for the next draw
  
  cubeRotation.x += rotationVelocity.x
  
  // Center
  mat4.translate(modelViewMatrix,     // destination matrix
                 modelViewMatrix,     // matrix to translate
                 [-dims.x/2 + 0.5, -dims.y/2 + 0.5, -dims.z/2 + 0.5])  // amount to translate

  const normalMatrix = mat4.create();
  mat4.invert(normalMatrix, modelViewMatrix);
  mat4.transpose(normalMatrix, normalMatrix);

  gl.useProgram(programInfo.program)
  
  // Set the shader uniforms
  gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix)
  gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix)
  gl.uniformMatrix4fv(programInfo.uniformLocations.normalMatrix, false, normalMatrix);
  gl.uniform1f(programInfo.uniformLocations.minFilter, minFilter);
  gl.uniform1f(programInfo.uniformLocations.maxFilter, maxFilter);
  gl.uniform1i(programInfo.uniformLocations.invertFilter, invertFilter);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.vertices);
  gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);
  gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, buffers.vertices.itemSize, gl.FLOAT, false, 0, 0);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.vertexNormals);
  gl.enableVertexAttribArray(programInfo.attribLocations.vertexNormal);
  gl.vertexAttribPointer(programInfo.attribLocations.vertexNormal, buffers.vertexNormals.itemSize, gl.FLOAT, false, 0, 0);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoords);
  gl.enableVertexAttribArray(programInfo.attribLocations.textureCoord);
  gl.vertexAttribPointer(programInfo.attribLocations.textureCoord,  buffers.textureCoords.itemSize, gl.FLOAT, false, 8, 0);
  gl.vertexAttribDivisor(programInfo.attribLocations.textureCoord, 1);

  gl.bindBuffer(gl.ARRAY_BUFFER, buffers.instanceOffsets);
  gl.enableVertexAttribArray(programInfo.attribLocations.instanceOffset);
  gl.vertexAttribPointer(programInfo.attribLocations.instanceOffset, 3, gl.FLOAT, false, 12, 0);
  // gl.vertexAttribDivisor sets the vertex attribute increment per instance
  gl.vertexAttribDivisor(programInfo.attribLocations.instanceOffset, 1);
  

 // Tell WebGL we want to affect texture unit 0
  gl.activeTexture(gl.TEXTURE0);

  // Bind the texture to texture unit 0
  gl.bindTexture(gl.TEXTURE_2D, texture);

  // Tell the shader we bound the texture to texture unit 0
  gl.uniform1i(programInfo.uniformLocations.uSampler, 0);

  // Triangle vertex indices
  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices)
  
  gl.drawElementsInstanced(gl.TRIANGLES, voxel_indices.length, gl.UNSIGNED_SHORT, 0, dims.x*dims.y*dims.z);
}

function initShaderProgram(gl, vsSource, fsSource) {
  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)
  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)

  const shaderProgram = gl.createProgram()
  gl.attachShader(shaderProgram, vertexShader)
  gl.attachShader(shaderProgram, fragmentShader)
  gl.linkProgram(shaderProgram)

  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram))
    return null
  }

  return shaderProgram
}

function loadShader(gl, type, source) {
  const shader = gl.createShader(type)
  gl.shaderSource(shader, source)
  gl.compileShader(shader)

  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader))
    gl.deleteShader(shader)
    return null
  }

  return shader
}